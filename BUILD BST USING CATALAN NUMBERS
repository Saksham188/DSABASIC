
///Possible BST's: when a number n (nodes in tree) is given.


#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};
///Sare Trees ki root ko ham vector mein store krdete hai.
vector<Node*> ConstructTrees(int Start,int End) ///we pass start=1
{
    vector<Node*>trees; //to store node.

    if(Start>End)
    {
        trees.push_back(NULL);
        return trees;
    }

    for(int i=Start;i<=End;i++)   ///isme construct krenge BST.
    {
        vector<Node*> LeftSubtrees=ConstructTrees(Start,i-1);  ///yaha ham vector mein Left Subtrees banane vale.i-1 bcse left subtree mein ith node se kam value jani chahiye.
        vector<Node*> RightSubtrees=ConstructTrees(i+1,End);

/// Is loop se ham sare possible left subtree ko sare possible right subtree se combine krre hai and form krre ek larger BST.
        for(int j=0;j<LeftSubtrees.size();j++)   ///this is catalan logic
        {
            Node* Left=LeftSubtrees[j];

            for(int k=0;k<RightSubtrees.size();k++)
            {
                Node* Right=RightSubtrees[k];
                ///Ab hamare paas i-1 tak left subtree construct hogya,i+1 se right subtree construct hogya.ab yaha ith node ko jod do.
                Node* node=new Node(i);
                node->Left=Left;
                node->Right=Right; ///yaha BST tyaar.
                trees.push_back(node);  ///ye hamara catalan vala ans.
            }

        }
    }
}

void PrintPreOrder(Node* root)
{
    if(root==NULL)
        return;

    cout<<root->Data<<" ";
    PrintPreOrder(root->Left);
    PrintPreOrder(root->Right);
}

int main()
{
    vector<Node*>TotalTrees=ConstructTrees(1,3);
    for(int i=0;i<TotalTrees.size();i++)
    {
        cout<<i+1<<" : ";
        PrintPreOrder(TotalTrees[i]);
        cout<<endl;
    }
}
