/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i=0;
    TreeNode* ConstructBST(vector<int>preorder,int Min,int Max)
    {
        if(i==preorder.size() || preorder[i]<Min ||preorder[i]>Max)
            return NULL;  ///here we check 3 conditions,if array traversed completely or BST condition fails.
        
        TreeNode* root= new TreeNode(preorder[i++]);  ///here we make tree node.
        root->left=ConstructBST(preorder,Min,preorder[i-1]);  ///and here we pass value now max value can only be our key as our value must be less than or equal to prev element in preorder.
        root->right=ConstructBST(preorder,preorder[i-1],Max);
        ///and here we pass value now min value can only be our key as our value must be greater than or equal to prev element in preorder.
            
        return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
       TreeNode *ans= ConstructBST(preorder,INT_MIN,INT_MAX);
        return ans;
    }
};




##################
METHOD 2
##################
/// Esa isliye bcse BST mein sari keys sorted order mein rakhi hoti hai.
///
/// Time Complexity O(n)
///
///
#include<iostream>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

Node* ConstructBST(int PreOrder[],int* PreOrderIndex,int key,int Min,int Max,int n) ///n is total elements,min and max will be min and max value for the node.
{
    if(*PreOrderIndex>=n)
       return NULL;

   Node* root=NULL;
   if(key>Min and key<Max)     ///key check kro ki min se badi and max se choti hai tbhi BST ki condition satisfy kre.
   {
       root=new Node(key);
       *PreOrderIndex=*PreOrderIndex+1; ///PreOrder index ko update krdenge ham yaha pe.

       if(*PreOrderIndex< n)  ///ab check kro ki preorder index ki val less than n hai toh root ka left.
       {
           root->Left=ConstructBST(PreOrder,PreOrderIndex,PreOrder[*PreOrderIndex],Min,key,n); ///yaha max=key kia bcse BST mein left mein sare nodes chote hote hai.
       }

       if(*PreOrderIndex< n)
       {
           root->Right=ConstructBST(PreOrder,PreOrderIndex,PreOrder[*PreOrderIndex],key,Max,n); ///yaha max=key kia bcse BST mein left mein sare nodes chote hote hai.
       }
   }
   return root;

}

void PrintPreOrder(Node* root)
{
    if(root==NULL)
        return;

    cout<<root->Data<<" ";
    PrintPreOrder(root->Left);
    PrintPreOrder(root->Right);
}

int main()
{
    int preorder[]={10,2,1,13,11};
    int n=5;
    int preorderIdx=0;
    Node* root=ConstructBST(preorder,&preorderIdx,preorder[0],INT_MIN,INT_MAX,n);
///PreOrder mein 0 index pe root hi store hota hai.
    PrintPreOrder(root);
}


