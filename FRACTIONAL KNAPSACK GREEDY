// Fractional Knapsack:  We r given  n items with {value,weight} of each item and capacity of knapsack(Sack) 'W'.
///We need to put these items in Sack such that final value of items in knapsack is max.

//Logic:First find value/weight of each item. and then sort in dec order acc to val/weight and then pick from starting till our knapsack has capacity.  
// 
/*
    eg 5 items
     items:      21  24  12  40  30
      weight=     7   4   6   5   6 
    val/weight    3   6   2   8    5
        
     Now sort acc to val/weight   
 val/weight           8   6   5   3   2
    val              40  24  30  21  12
    weight:          5   4   6   7   6
   
  ans=40+24+30+ 3*(5)=94+15=109

*/
// 
// 

#include<bits/stdc++.h>
using namespace std;

bool compare(pair<int,int>p1,pair<int,int>p2)
{
    double ratio1=double(p1.first)/p1.second; ///find ratio of weight/value.
    double ratio2=double(p2.first)/p2.second;
    return ratio1>ratio2;  ///as we want to sort descending
}


int main()
{
    int n;
    cout<<"Enter Number of items: ";
    cin>>n;

    vector<pair<int,int> >a(n);
    cout<<"\nEnter value and weight of Items: ";
    for (int i = 0; i < n; i++)
    {
        cin>>a[i].first>>a[i].second; ///here take input of weight and value.
    }
    
    int Weight;
    cout<<"\nEnter weight of sack: ";
    cin>>Weight;

    sort(a.begin(),a.end(),compare);

    ///Now take till we can get in sack.
    int ans=0;

    for(int i=0;i<n;i++)
    {
        if(Weight>=a[i].second) ///if sack ka weight bada toh mtlb ham aur bhar skte hai sack mein.
        {
            ans+=a[i].first;  ///Increase items in ans.
            Weight-=a[i].second;  ///sack ka weight reduce krdo.
            continue;
        }
        ///here we are checking condition to take partially 
        ///we will enter here only when above condition fail.
        double valueUnitWeight=double(a[i].first) /a[i].second;
        ans+=valueUnitWeight*Weight;
        Weight=0; ///As now no new items can be inserted in sack.
        break;
    }

    cout<<ans<<endl;
}

