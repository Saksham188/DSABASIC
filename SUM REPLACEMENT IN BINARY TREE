/// Here we will replace value of each node with the sum of all subtree nodes and itself.
///Logic: Agar child mein NULL ni hai toh ham parent ke sum mein add kardenge dono childs ka sum.
///
/// Time Complexity=O(n) as hamara sum replace call hoga n nodes ke lie and har node chalra hai O(1) mein.

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

void SumReplace(Node* root)
{
    if(root==NULL)
        return;

    SumReplace(root->Left);
    SumReplace(root->Right);

    if(root->Left!=NULL)
    {
        root->Data+=root->Left->Data;
    }

    if(root->Right!=NULL)
    {
        root->Data+=root->Right->Data;
    }
}


void PreOrder(Node* root)
{
    if(root==NULL)
        return;

    cout<<root->Data<<" ";
    PreOrder(root->Left);
    PreOrder(root->Right);
}

int main()
{
   Node* root= new Node(1);
   root->Left= new Node(2);
   root->Right = new Node(3);
   root->Left->Left=new Node(4);
   root->Left->Right= new Node(5);
   root->Right->Left=new Node(6);
   root->Right->Right= new Node(7);

   PreOrder(root);
   cout<<endl;
   SumReplace(root);
   PreOrder(root);
}

