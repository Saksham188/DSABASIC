/// For given root nodes of 2 BST print if the BST's are identical or not.Identical BST's are structurally identical and have equal values for the nodes in the structure.
/// Strategy: 1.If both empty,return true.  2.If both non-empty :a) check that data at nodes is equal.  b).Check if left subtree are equal.  c)Check if right subtree are equal.
/// 3. If (a,b,c) are true,return true. else return false.
///
///

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

bool IsIdentical(Node* root1,Node* root2)
{
    if(root1==NULL and root2==NULL)  ///if both root null then return true.
        return true;

    else if(root1==NULL || root2==NULL) ///ie koi ek null ho toh ye structurally unidentical hogye.
        return false;

    else  ///for identical bst root1ka data=root2 ka data and its left and right subtrees must be equal.
    {
        bool condition1=root1->Data==root2->Data;
        bool condition2= IsIdentical(root1->Left,root2->Left);
        bool condition3= IsIdentical(root1->Right,root2->Right);

        if(condition1 and condition2 and condition3)  ///if all 3 conditions match then true else false.
            return true;
        return false;
    }

}

int main()
{
    Node* root=new Node(2);
    root->Left=new Node(1);
    root->Right=new Node(3);

    Node* root2=new Node(2);
    root2->Left=new Node(1);
    root2->Right=new Node(10);

    if(IsIdentical(root,root2))
        cout<<"BSTs are identical\n";
    else
        cout<<"BSTs are not identical\n";
}
