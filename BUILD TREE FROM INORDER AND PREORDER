/// Algorithm: 1.Pick element from preorder and create a node , 2.Increment preorder idx ,3.Search for picked element's pos in inorder.
/// 4. Call to build left subtree from inorder's 0 to pos-1   5.Call to build right subtree from inorder pos+1 to n.  6.Return the node.
///
///
///
///

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

int Search(int InOrder[],int Start,int End, int Current)
{
    for(int i=Start;i<=End;i++)
    {
        if(InOrder[i]==Current)
            return i;
    }
    return -1;
}

Node* BuildTree(int PreOrder[],int InOrder[], int Start,int End)  ///Start and end honge hamare inorder ka start and end.
{
    static int Index=0;

    if(Start>End)
        return NULL;

    int Current=PreOrder[Index];
    Index++;
    Node* node=new Node(Current);  ///ye hamara root node bangya.

    if(Start==End)///ie koi child ni hoga jab.
        return node;
    int position=Search(InOrder,Start,End,Current);
    node->Left=BuildTree(PreOrder,InOrder,Start,position-1); ///Pos-1 bcse current vale se phele vale honge left subtree ke elements.
    node->Right=BuildTree(PreOrder,InOrder,position+1,End); ///Pos-1 bcse current vale se phele vale honge left subtree ke elements.

    return node;
}

void InOrderPrint(Node* root)
{
    if(root==NULL)
    {
        return;
    }
    InOrderPrint(root->Left);
    cout<< root->Data <<" ";
    InOrderPrint(root->Right);
}

int main()
{
    int preorder[]={1,2,4,3,5};
    int inorder[]={4,2,1,5,3};
    Node* root=BuildTree(preorder,inorder,0,4);
    InOrderPrint(root);
}
