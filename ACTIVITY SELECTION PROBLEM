// Problem: You are given n activities with their start and finish times.Select max no of activities that can be performed by a single person,
///assuming that a person can work on a single activity at a time.
// eg input=3  {(10,20),(12,15),(20,30)}  Output =2  1215 and 2030 or 1020 and 2030

// Constraints: 1<=n<=1e5, 1<=start,end<=1e9, start<=end

// Logic: If we are at ith activity then next step will be to take the next activity which ends first.Sort activities wrt end times.
// Here take more activities with less time so to maximise ans. 
//

#include<bits/stdc++.h>
using namespace std;

int main()
{
   int n;
   cin>>n;

   vector<vector<int> > v;

   for(int i=0;i<n;i++)
   {
       int start,end;
       cin>>start>>end;
       v.push_back({start,end});
   } 
    ///We can also make custom comperator as follows,ie special fun we sometimes use in sort.
   sort(v.begin(),v.end(),[&](vector<int> &a,vector<int> &b)
   {
       return a[1]<b[1];
   }
    
   );

   int ans=1;
   int end=v[0][1]; ///ye hoga vo jo sbse jldi khtm hogi.
   
   for(int i=1;i<n;i++)
   {
       if(v[i][0]>=end) ///here we will take new activity only if its start time is more than our end time of prev activity
       {
           ans++;
           end=v[i][1];  ///now update our end.
       }
   }

   cout<<ans<<endl;


}

