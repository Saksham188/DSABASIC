// Diameter of binary tree is the No. of nodes in longest path bw 2 nodes.Path dont need to pass via root.
// Time Complexity:O(N)
// 
// 
// 
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

int CalcDiameter(Node* root,int* maxi)
{
    ///Logic:Yaha ham left subtree ki height,diameter calc krte same for right subtree
    ///fir current diameter ko leftheight+rightheight+1.And apni height ko update krdo max(leftheight,rightheight)+1;
    ///and fir insab mein se jo max value hogi vo return krdo.
    if(root==NULL)
    {
        *maxi=0;
        return 0;
    
    }
        
    int leftheight=0,rightheight=0;

    int LeftDiameter=CalcDiameter(root->Left,&leftheight);
    int RightDiameter=CalcDiameter(root->Right,&rightheight);
    int CurrentDiameter=leftheight+rightheight+1;

    *maxi=max(leftheight,rightheight)+1;
    return max(CurrentDiameter,max(LeftDiameter,RightDiameter)); 

}

int main()
{
   Node* root= new Node(1);
   root->Left= new Node(2);
   root->Right = new Node(3);
   root->Left->Left=new Node(4);
   root->Left->Right=new Node(5);

   root->Right->Left=new Node(6);
   root->Right->Right=new Node(7);
   int hei=0;

   cout<< CalcDiameter(root,&hei);

}
         
