/// Max Possible sum of a path in the binary tree starting and ending at any node.
/// Strategy: For each node compute:
/// 1.Node val  2.Max path through left child+node val   3. Max path through right child + node val
/// 4.Max path through left child + max path through right child+node val
/// hamara ans hoga charo mein se max.
///
###############################
2SOLUTIONS:
###############################

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

int MaxPathSumUtil(Node* root,int &ans)
{
    if(root==NULL)    ///agar root null ho toh 0 return krdo ans.
        return 0;

    int left=MaxPathSumUtil(root->Left,ans);
    int right=MaxPathSumUtil(root->Right,ans);
    int NodeMax=max(max(root->Data,root->Data+left+right),max(root->Data+left,root->Data+right));
    ans=max(ans,NodeMax);

    int SinglePathSum=max(root->Data,max(root->Data+left,root->Data+right));
    return SinglePathSum;
}

int MaxPathSum(Node* root)
{
    int ans=INT_MIN; ///isme hoga -infinity taki baki mein ham max value nikal ske.
    MaxPathSumUtil(root,ans);
    return ans;
}

int main()
{
    Node* root=new Node(1);
    root->Left=new Node(2);
    root->Right=new Node(3);
    root->Left->Left=new Node(4);
    root->Right->Right=new Node(5);
    cout<<MaxPathSum(root);
}


####################################################
SOLUTION 2:
####################################################
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSumFinal(TreeNode* root,int &ans)
    {
        if(root==NULL)
            return 0;
        int left=max(0,maxPathSumFinal(root->left,ans));        ///first condition calc left
        int right=max(0,maxPathSumFinal(root->right,ans));     /// second condition calc right.
        ans=max(ans,left+right+root->val);     ///update ans as max of (root+its 2 childs)
         
        return (max(left,right) +root->val);        ///return ans as max of(left or right)+parent ie max of single child +parent
    
    }
    int maxPathSum(TreeNode* root) {
        int ans=INT_MIN;
        maxPathSumFinal(root,ans);
        return ans;
    }
};

int main()
{
    Node* root=new Node(1);
    root->Left=new Node(2);
    root->Right=new Node(3);
    root->Left->Left=new Node(4);
    root->Right->Right=new Node(5);
    cout<<MaxPathSum(root);
}


