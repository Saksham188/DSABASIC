///Logic works only for single digits
/// Problem: For a given array and an integer K,check if any subarray of size K exists in array such that concatenation of elements form a palindrome.

///Approach1: Generate All subarrays of size K in O(n^2) time and then check whether their concat forms palindrome or not in O(n) time.
/// Total Complexity=O(N^3)

///Approach 2: Store concatenation of initial K elements .Now iterate over array and start deleting from start and adding from end and at each step check if palindrome is palindrome or not,
/// TC: O(N^2)
//

#include<bits/stdc++.h>
using namespace std;

bool IsPalindrome(int n) ///here we are checking whether that number is palindrome or not.
{
    int temp=n,number=0;

    while (temp>0)
    {
        number=number*10+temp%10;
        temp=temp/10;
    }

    if(number==n)
       return true;
    return false;

}

int FindPalindromicSubarray(vector<int>arr,int k)
{
    int num=0;

    for(int i=0;i<k;i++)
    {
        num=num*10+arr[i];
    }

    if(IsPalindrome(num))
    {
        return 0; ///which tells that from 0 to k-1 is our ans.
    }

    for(int i=k;i<arr.size();i++)
    {
        num=num%(int)pow(10,k-1); ///isse ek digit kam ho jayega hamare concatenation se.
        num=num*10+arr[i];

        if(IsPalindrome(num))
        {
            return i-k+1;
        }
    }

    return -1;
}

int main()
{
    vector<int> arr={1,3,5,1,1,5};
    int k=4;

    int ans=FindPalindromicSubarray(arr,k);

    if(ans==-1)
      cout<<"No such palindromic array exists.";
    else
    {
        for(int i=ans;i<ans+k;i++)
        {
            cout<<arr[i]<<" ";
        }
    }

}

