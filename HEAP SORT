// Heapsort: First create a binary tree from an array,leftchild= 2i+1 , rightchild=2i+2
// Ab ham last non leaf node pakdenge and usey heapify down krdenge.
// toh ham ek nonleaf node uthayenge and uske bccho se compare krenge agr vo bccho ke max se bada hua toh shi vrna swap krdo parent and max child ko.
//fir ese krte krte upar ki direction mein jao.
// 
// Time Complexity:O(NlogN), SC:O(logN)
// 
// 

#include<bits/stdc++.h>
using namespace std;

void Heapify(vector<int>& heap,int current,int size)  ///TC: O(logN)
{
    int largest=current;
    int leftchild=2*current+1;
    int rightchild=2*current+2;

    if(leftchild<size and heap[leftchild]>heap[largest])  ///here we calculate what is max among root and both childs.
      largest=leftchild;

    if(rightchild<size and heap[rightchild]>heap[largest])
      largest=rightchild;

    if(largest!=current) ///ie if child node is greater eg we have root 1, lc=4,rc=5 toh now for max heap property we need to swap root and greater child.
    {
        swap(heap[largest],heap[current]);
        Heapify(heap,largest,size); ///now after swapping we call heapify for largest element.
    }
}
void HeapSort(vector<int> &arr)
{
    ///here first we will create heap.
    int n=arr.size();

    for(int i=n/2 -1;i>=0;i--) ///first non leaf element is at pos n/2-1
    {
        Heapify(arr,i,n);  
    }
    cout<<endl;
    for(int i=0;i<n;i++)
    cout<<arr[i]<<" ";
    cout<<endl<<endl;
    for(int i=n-1;i>0;i--)
    {
        ///here first swap heap root with last element.
        swap(arr[0],arr[i]);

        Heapify(arr,0,i); ///heapify root with heapsize =i
    }
}

int main()
{
    int n;
    cin>>n;

    vector<int>arr(n);

    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    HeapSort(arr);
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }

}




