///Given a binary tree,flatten it into linked list in place(ie nayi list ni bana sakte).After flattening left of each node should point to NULL and right should contain next node in preorder sequence.
///(Its not allowed to use other data structures.)
/// InGeneral Strategy for all trees: 1.Recursively flatten the left & right subtrees. 2).Store the left tail and right tail. 3).Store right subtree in temp and make left subtree as right subtree.
///4).Join right subtree with left tail.
///5). Return right tail.
///
///
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int Data;
    Node* Left;
    Node* Right;

    Node(int value)
    {
        Data=value;
        Left=NULL;
        Right=NULL;
    }
};

void Flatten(Node* root)
{
    ///agar root Null ho ya leaf node ho toh null return krdo.
    if(root==NULL || (root->Left==NULL && root->Right==NULL))
        return;
   /// iska logic ye hai phele left subtree ko flatten kro fir right subtree ko.
   ///iske lie phele recursively left and right ko kro.fir right ko temp mein store krlo and left ko right bana do .
   
   if(root->Left!=NULL) ///root ka left null na ho toh hi flatten krna.
   {
       Flatten(root->Left);
       ///yaha jab ek baar flatten krlia root ke left ko toh temp var mein root ka right store krlo
       Node* temp=root->Right;    
       root->Right=root->Left;
       root->Left=NULL;

       Node* t=root->Right;   ///ab nye root ke right ki tail calculate krenege ham. 

       while(t->Right!=NULL) ///jis value pe root ka right null hogya vo value hai hamare right ki tail.
       {
            t=t->Right;
       }

       t->Right=temp; ///yaha hamne root ka right(jo phele left tha) usme jod di root ka left (jo phele root ka right tha).
   }

   Flatten(root->Right);  ///ab right subtree ke lie call krdo.
}

void InOrderPrint(Node* root)
{
    if(root==NULL)
        return;

    InOrderPrint(root->Left);
    cout<<root->Data<<" ";
    InOrderPrint(root->Right);
}

int main()
{
    Node* root=new Node(4);
    root->Left=new Node(9);
    root->Right=new Node(5);
    root->Left->Left=new Node(1);
    root->Left->Right=new Node(3);
    root->Right->Right=new Node(6);

    Flatten(root);
    InOrderPrint(root);

}


